package Autopilot
public
	with CSAF_Properties, CSAF_Parameters, AGREE_Stdlib;
	with Msg, Plant;
	
	-- Sadly, "extends" isn't supported by AGREE. Otherwise we could simplify
	-- using this:
	abstract Autopilot
		features
			--Plant_Sub : feature group inverse of Plant::Pub;
			Plant_Sub : in data port Msg::Message.Plant_Pub;
			Outputs : out data port Msg::Message.Autopilot_Output;
	end Autopilot;
	
	abstract GCAS_Autopilot --extends Autopilot
		features
			Plant_Sub : in data port Msg::Message.Plant_Pub;
			Outputs : out data port Msg::Message.Autopilot_Output;
			FDAS : out data port Msg::Message.Autopilot_State;
		properties
			CSAF_Properties::System_Name => "F16 GCAS Autopilot";
			CSAF_Properties::System_Representation => "black box";
			CSAF_Properties::System_Solver => "Euler";
			CSAF_Properties::Sampling_Frequency => 10;
			CSAF_Properties::Is_Discrete => true;
			CSAF_Properties::Is_Hybrid => false;
			
			-- Parameters
			CSAF_Parameters::NzMax => 9.0;
			CSAF_Parameters::vt_des => 502.0;
		annex agree {**
--			eq state : Msg::GCAS_State = FDAS.GCAS_State;
			eq state : int = FDAS.GCAS_State;
			eq trigger : bool = gcas_trigger(Plant_Sub.State);
			eq roll : real = Plant_Sub.State.phi;
			
			eq to_waiting  : bool = AGREE_Stdlib::RisingEdge(state = waiting_st, false);
			eq to_roll     : bool = AGREE_Stdlib::RisingEdge(state = roll_st, false);
			eq to_pull     : bool = AGREE_Stdlib::RisingEdge(state = pull_st, false);
			eq to_finished : bool = AGREE_Stdlib::RisingEdge(state = finished_st, false);
			
			eq aileron_movement : bool = Outputs.delta_a != 0.0;
			
			-- XXX: What actually triggers the transition to Waiting?
			guarantee "GCAS becomes active when roll angle goes too high" :
				trigger => to_waiting;
			
			guarantee "Roll maneuver starts after GCAS becomes active" :
				to_waiting => to_roll;
			
			guarantee "Aileron changes after roll maneuver starts" :
				to_roll => aileron_movement;
		**};
	end GCAS_Autopilot;
	
	abstract Fixed_Airspeed_Autopilot --extends Autopilot
		features
			Plant_Sub : in data port Msg::Message.Plant_Pub;
			Outputs : out data port Msg::Message.Autopilot_Output;
		properties
			CSAF_Properties::System_Name => "F16 Fixed Airspeed Autopilot";
			CSAF_Properties::System_Representation => "black box";
			CSAF_Properties::System_Solver => "Euler";
			CSAF_Properties::Sampling_Frequency => 10;
			CSAF_Properties::Is_Discrete => true;
			CSAF_Properties::Is_Hybrid => false;
			
			-- Parameters
			CSAF_Parameters::setpoint => 800.0;
			CSAF_Parameters::p_gain => 0.01;
			CSAF_Parameters::xequil => (502.0, 0.03887505597600522, 0.0, 0.0, 0.03887505597600522, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1000.0, 9.05666543872074);
	end Fixed_Airspeed_Autopilot;
	
	abstract Fixed_Altitude_Autopilot --extends Autopilot
		features
			Plant_Sub : in data port Msg::Message.Plant_Pub;
			Outputs : out data port Msg::Message.Autopilot_Output;
		properties
			CSAF_Properties::System_Name => "F16 Fixed Altitude Autopilot";
			CSAF_Properties::System_Representation => "black box";
			CSAF_Properties::System_Solver => "Euler";
			CSAF_Properties::Sampling_Frequency => 10;
			CSAF_Properties::Is_Discrete => true;
			CSAF_Properties::Is_Hybrid => false;
			
			-- Parameters
			CSAF_Parameters::setpoint => 2500.0;
			CSAF_Parameters::xequil => (502.0, 0.03887505597600522, 0.0, 0.0, 0.03887505597600522, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1000.0, 9.05666543872074);
	end Fixed_Altitude_Autopilot;
	
	abstract Monitor
		features
			GCAS_Autopilot_FDAS : in data port Msg::Message.Autopilot_State;
			--Plant_Sub : feature group inverse of Plant::Pub;
			Plant_Sub : in data port Msg::Message.Plant_Pub;
			Outputs : out data port Msg::Message.Monitor_Output;
		properties
			CSAF_Properties::System_Name => "F16 Autopilot Monitor";
			CSAF_Properties::System_Representation => "black box";
			CSAF_Properties::System_Solver => "Euler";
			CSAF_Properties::Sampling_Frequency => 100;
			CSAF_Properties::Is_Discrete => true;
			CSAF_Properties::Is_Hybrid => false;
		annex agree {**
			--eq gcas_state : Msg::GCAS_State = GCAS_Autopilot_FDAS.GCAS_State;
			eq gcas_state : int = GCAS_Autopilot_FDAS.GCAS_State;
			
			eq plant_state : Msg::Message.Plant_State = Plant_Sub.State;
			eq altitude : real = plant_state.h;
			eq airspeed : real = plant_state.vt;
			eq roll 	: real = plant_state.phi;
			-- ^ Are these pulled from the right places?
			
			-- Cribbed from monitor.py
			eq gcas_primitive : bool =
				altitude > 3400.0 and
				altitude < 4900.0 and
				AGREE_Stdlib::AbsoluteValueReal(roll) < 30.0;
			eq gcas_active : bool = not (gcas_state = waiting_st or gcas_state = finished_st);
			guarantee "Monitor selection behavior" :
				Outputs.selection =
					if 		gcas_primitive or gcas_active	then gcas_sel
					else if airspeed < 750.0				then altitude_sel
					else										 airspeed_sel;
		**};
	end Monitor;
	
	abstract Selector
		features
			Autopilot_Monitor_Outputs : in data port Msg::Message.Monitor_Output;
			Fixed_Airspeed_Autopilot_Outputs : in data port Msg::Message.Autopilot_Output;
			Fixed_Altitude_Autopilot_Outputs : in data port Msg::Message.Autopilot_Output;
			GCAS_Autopilot_Outputs : in data port Msg::Message.Autopilot_Output;
			Outputs : out data port Msg::Message.Autopilot_Output;
		properties
			CSAF_Properties::System_Name => "Autopilot Selector";
			CSAF_Properties::System_Representation => "black box";
			CSAF_Properties::System_Solver => "Euler";
			CSAF_Properties::Sampling_Frequency => 10;
			CSAF_Properties::Is_Discrete => true;
			CSAF_Properties::Is_Hybrid => false;
			
			-- Parameters
			CSAF_Parameters::mapper => ("gcas", "altitude", "airspeed");
		annex agree {**
--			eq monitor_sel : Msg::AP_Monitor_Selection = Autopilot_Monitor_Outputs.selection;
			eq monitor_sel : int = Autopilot_Monitor_Outputs.selection;
			guarantee "Output selected according to monitor input" :
				Outputs =
					if 		monitor_sel = airspeed_sel	then Fixed_Airspeed_Autopilot_Outputs
					else if monitor_sel = altitude_sel	then Fixed_Altitude_Autopilot_Outputs
					else									 GCAS_Autopilot_Outputs;
		**};
	end Selector;
	
	annex agree {**
--		const gcas_sel : Msg::AP_Monitor_Selection = enum (Msg::AP_Monitor_Selection, gcas);
--		const airspeed_sel : Msg::AP_Monitor_Selection = enum (Msg::AP_Monitor_Selection, airspeed);
--		const altitude_sel : Msg::AP_Monitor_Selection = enum (Msg::AP_Monitor_Selection, altitude);
		const gcas_sel     : int = 0;
		const airspeed_sel : int = 1;
		const altitude_sel : int = 2;
		
--		const waiting_st : Msg::GCAS_State = enum (Msg::GCAS_State, Waiting);
--		const roll_st : Msg::GCAS_State = enum (Msg::GCAS_State, Roll);
--		const pull_st : Msg::GCAS_State = enum (Msg::GCAS_State, Pull);
--		const finished_st : Msg::GCAS_State = enum (Msg::GCAS_State, Finished);
		const waiting_st  : int = 0;
		const roll_st     : int = 1;
		const pull_st     : int = 2;
		const finished_st : int = 3;
		
		node roll_too_high(roll : real) returns (b : bool);
		let
			b = AGREE_Stdlib::AbsoluteValueReal(roll) > 30.0;
		tel;
		
		node gcas_trigger(s : Msg::Message.Plant_State) returns (b : bool);
		let
			b = roll_too_high(s.phi);
		tel;
	**};
	
end Autopilot;
