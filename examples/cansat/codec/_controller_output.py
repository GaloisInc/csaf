# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from csaf/controller_output.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class controller_output(genpy.Message):
  _md5sum = "b4b413027ef9830eafce79d73cddc1a4"
  _type = "csaf/controller_output"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """uint32 version_major
uint32 version_minor

string topic

float64 time

float64 fx0
float64 fy0

float64 fx1
float64 fy1

float64 fx2
float64 fy2

float64 fx3
float64 fy3"""
  __slots__ = ['version_major','version_minor','topic','time','fx0','fy0','fx1','fy1','fx2','fy2','fx3','fy3']
  _slot_types = ['uint32','uint32','string','float64','float64','float64','float64','float64','float64','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       version_major,version_minor,topic,time,fx0,fy0,fx1,fy1,fx2,fy2,fx3,fy3

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(controller_output, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.version_major is None:
        self.version_major = 0
      if self.version_minor is None:
        self.version_minor = 0
      if self.topic is None:
        self.topic = ''
      if self.time is None:
        self.time = 0.
      if self.fx0 is None:
        self.fx0 = 0.
      if self.fy0 is None:
        self.fy0 = 0.
      if self.fx1 is None:
        self.fx1 = 0.
      if self.fy1 is None:
        self.fy1 = 0.
      if self.fx2 is None:
        self.fx2 = 0.
      if self.fy2 is None:
        self.fy2 = 0.
      if self.fx3 is None:
        self.fx3 = 0.
      if self.fy3 is None:
        self.fy3 = 0.
    else:
      self.version_major = 0
      self.version_minor = 0
      self.topic = ''
      self.time = 0.
      self.fx0 = 0.
      self.fy0 = 0.
      self.fx1 = 0.
      self.fy1 = 0.
      self.fx2 = 0.
      self.fy2 = 0.
      self.fx3 = 0.
      self.fy3 = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2I().pack(_x.version_major, _x.version_minor))
      _x = self.topic
      length = len(_x)
      if isinstance(_x, str if python3 else unicode):
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_9d().pack(_x.time, _x.fx0, _x.fy0, _x.fx1, _x.fy1, _x.fx2, _x.fy2, _x.fx3, _x.fy3))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 8
      (_x.version_major, _x.version_minor,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.topic = str[start:end].decode('utf-8')
      else:
        self.topic = str[start:end]
      _x = self
      start = end
      end += 72
      (_x.time, _x.fx0, _x.fy0, _x.fx1, _x.fy1, _x.fx2, _x.fy2, _x.fx3, _x.fy3,) = _get_struct_9d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2I().pack(_x.version_major, _x.version_minor))
      _x = self.topic
      length = len(_x)
      if isinstance(_x, str if python3 else unicode):
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_9d().pack(_x.time, _x.fx0, _x.fy0, _x.fx1, _x.fy1, _x.fx2, _x.fy2, _x.fx3, _x.fy3))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 8
      (_x.version_major, _x.version_minor,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.topic = str[start:end].decode('utf-8')
      else:
        self.topic = str[start:end]
      _x = self
      start = end
      end += 72
      (_x.time, _x.fx0, _x.fy0, _x.fx1, _x.fy1, _x.fx2, _x.fy2, _x.fx3, _x.fy3,) = _get_struct_9d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_9d = None
def _get_struct_9d():
    global _struct_9d
    if _struct_9d is None:
        _struct_9d = struct.Struct("<9d")
    return _struct_9d
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
