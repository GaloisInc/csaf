# Simple job configuration file

# simulation options
tspan = [0.0, 10.0]
show_status = true # show progress during simulation
plot = true # plot results on screen

initial_conditions = [  540.0, # vt [ft/s]
                        0.037027160081059704, # alpha [rad]
                        0.0, # beta [rad]
                        0.1, # phi [rad]
                        -0.1, # theta [rad]
                        -0.1, # psi [rad]
                        0.0, # p [rad/s]
                        0.0, # q [rad/s]
                        0.0, # r [rad/s]
                        0.0, # pn [m]
                        0.0, # pe [m]
                        4800.0, # h [ft]
                        90.0] # power [%]

# Use parallel runner
parallel = true

# [random, fixed, from_file]
x0 = "fixed"
bounds = [    [200.0, 1000.0, 100.0], # vt [ft/s]
              [0.026692982, 0.047745614, 0.01], # alpha [rad]
              [0.0], # beta [rad]
              [0.785], # phi [rad]
              [3.14], # theta [rad]
              [0.785], # psi [rad]
              [0.0], # p [rad/s]
              [0.0], # q [rad/s]
              [0.0], # r [rad/s]
              [0.0], # pn [m]
              [0.0], # pe [m]
              [500.0], # h [ft]
              [9.0]] # power [%]

# predefined terminating condition from a library
terminating_conditions = "ground_collision"

# predefined static tests
static_tests = [
    # Option 1:
    # Very generic test defined in src/static_tests such as overshoot(ref_time, reference, res_time)
    # User then specifies the required variables
    "overshoot(trajs['autopilot'].times, np.array(getattr(trajs['autopilot'], 'outputs'))[:, 0], trajs['plant'].times, np.array(getattr(trajs['plant'], 'outputs'))[:, 0])",
    # Option 2:
    # have library for each example, such as examples/f16/tests.py and define a wrapper there
    "overshoot_nz"
]

# [true|false]
x0_save_to_file = true