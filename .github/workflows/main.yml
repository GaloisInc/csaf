# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the develop branch
  push:
  #pull_request:

  # Allows you to run this workflow manually from the Actions tab
  #workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  test-examples:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Install dependencies
        run: sudo ./dependencies.sh
      - uses: actions/setup-python@v2
        with:
          python-version: '3.9.6'
      - uses: syphar/restore-virtualenv@v1
        id: cache-virtualenv
        with:
          requirement_files: ./requirements.txt
      
      - uses: syphar/restore-pip-download-cache@v1
        if: steps.cache-virtualenv.outputs.cache-hit != 'true'

        # the package installation will only be executed when the
        # requirements-files have changed.
      - run: pip install -r requirements.txt
        if: steps.cache-virtualenv.outputs.cache-hit != 'true'

      - run: PYTHONPATH=$PWD pytest --mypy -s tests

  #     - name: F16 simple test
  #       run: ./run-csaf.sh -e f16-simple -n
      
  #     - uses: actions/upload-artifact@v2
  #       with:
  #         name: f16-simple
  #         path: |
  #           ./examples/f16/output/*.log
  #           ./examples/f16/output/*.pdf
  #           ./examples/f16/output/*.png
  #         retention-days: 7
  #     - run: rm -rf ./examples/f16/output


  #     - name: F16 fuzzy low level controller
  #       run: ./run-csaf.sh -e f16-fuzzy -n
      
  #     - uses: actions/upload-artifact@v2
  #       with:
  #         name: f16-fuzzy
  #         path: |
  #           ./examples/f16/output/*.log
  #           ./examples/f16/output/*.pdf
  #           ./examples/f16/output/*.png
  #         retention-days: 7
  #     - run: rm -rf ./examples/f16/output


  #     - name: F16 GCAS shield
  #       run: ./run-csaf.sh -e f16-shield -n
      
  #     - uses: actions/upload-artifact@v2
  #       with:
  #         name: f16-shield
  #         path: |
  #           ./examples/f16/output/*.log
  #           ./examples/f16/output/*.pdf
  #           ./examples/f16/output/*.png
  #         retention-days: 7
  #     - run: rm -rf ./examples/f16/output


  #     - name: F16 neural Network low level controller
  #       run: ./run-csaf.sh -e f16-llc-nn -n
      
  #     - uses: actions/upload-artifact@v2
  #       with:
  #         name: f16-llc-nn
  #         path: |
  #           ./examples/f16/output/*.log
  #           ./examples/f16/output/*.pdf
  #           ./examples/f16/output/*.png
  #         retention-days: 7
  #     - run: rm -rf ./examples/f16/output


  #     - name: F16 Analyze low level controller performance
  #       run: ./run-csaf.sh -e f16-llc-analyze -n
      
  #     - uses: actions/upload-artifact@v2
  #       with:
  #         name: f16-llc-analyze
  #         path: |
  #           ./examples/f16/output/*.log
  #           ./examples/f16/output/*.pdf
  #           ./examples/f16/output/*.png
  #         retention-days: 7
  #     - run: rm -rf ./examples/f16/output


  #     - name: Inverted pendulum example
  #       run: ./run-csaf.sh -e inv-pendulum -n
      
  #     - uses: actions/upload-artifact@v2
  #       with:
  #         name: inv-pendulum
  #         path: |
  #           ./examples/inverted-pendulum/output/*.log
  #           ./examples/inverted-pendulum/output/*.pdf
  #           ./examples/inverted-pendulum/output/*.png
  #         retention-days: 7
  #     - run: rm -rf ./examples/inverted-pendulum/output
  
  # test-configs:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v2
  #     - name: Install dependencies
  #       run: sudo ./dependencies.sh
  #     - uses: actions/setup-python@v2
  #       with:
  #         python-version: '3.7'
  #     - uses: syphar/restore-virtualenv@v1
  #       id: cache-virtualenv
  #       with:
  #         requirement_files: ./requirements.txt
      
  #     - uses: syphar/restore-pip-download-cache@v1
  #       if: steps.cache-virtualenv.outputs.cache-hit != 'true'

  #       # the package installation will only be executed when the
  #       # requirements-files have changed.
  #     - run: pip install -r requirements.txt
  #       if: steps.cache-virtualenv.outputs.cache-hit != 'true'

  #     - name: f16-job-config 0 3
  #       run: ./run-csaf.sh -e f16-shield -f f16_job_conf_parallel_random.toml -n
  #     - name: Give OS time to close ports.
  #       run: sleep 10
  #     - name: f16-job-config 1 3
  #       run: ./run-csaf.sh -e f16-shield -f f16_job_conf_parallel_fixed.toml -n
  #     - name: Give OS time to close ports.
  #       run: sleep 10
  #     - name: f16-job-config 2 3
  #       run: ./run-csaf.sh -e f16-shield -f f16_job_conf_parallel_from_file.toml -n
  #     - name: Give OS time to close ports.
  #       run: sleep 10
  #     - name: f16-job-config 3 3
  #       run: ./run-csaf.sh -e f16-llc-analyze -f f16_job_conf_parallel_fixed.toml -n

  test-notebooks:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Install dependencies
        run: sudo ./dependencies.sh
      - uses: actions/setup-python@v2
        with:
          python-version: '3.9.6'
      - uses: syphar/restore-virtualenv@v1
        id: cache-virtualenv
        with:
          requirement_files: ./requirements.txt
      
      - uses: syphar/restore-pip-download-cache@v1
        if: steps.cache-virtualenv.outputs.cache-hit != 'true'

        # the package installation will only be executed when the
        # requirements-files have changed.
      - run: pip install -r requirements.txt
        if: steps.cache-virtualenv.outputs.cache-hit != 'true'

      - name: Build notebook tests
        run: ./.test_notebooks.sh
